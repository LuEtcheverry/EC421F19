str_replace_all(source, "et al.", "\\\\textit{et al.}")
))
) +
theme_pander(
base_size = 13,
base_family = "Roboto"
) +
theme(
panel.grid.minor = element_blank(),
legend.position = "bottom"
) +
scale_color_manual(
TeX("County PM$_{2.5}$ Status:"),
values = magma(10)[c(7, 1)]
) +
scale_fill_manual(
TeX("County PM$_{2.5}$ Status:"),
values = magma(10)[c(7, 1)]
)
# Save it
ggsave(
plot = gg_tmp,
path = dir_figures %>% paste0("Graphs/ExposureCDFs/AttainmentStatus/"),
filename = filename,
height = 7.5,
width = 12,
NULL
)
}
# Figure: CDF of population exposure by attainment, year, dataset ------------------------
# Set year
i <- 2005
# source <- "Di et al."
# source <- "van Donkelaar et al."
for (source in c("Di et al.", "van Donkelaar et al.")) {
# Create filename
if (str_detect(source, "van")) filename <- paste0("cdf_att_vd_", i, ".png")
if (str_detect(source, "Di")) filename <- paste0("cdf_att_di_", i, ".png")
# Plot the CDF for a given year
gg_tmp <- ggplot(
data = cdf_att_wide[year == i & dataset == source],
aes(x = pm_level, y = share, color = status)
) +
geom_hline(
yintercept = 0,
color = "grey70"
) +
geom_vline(
xintercept = 0,
color = "grey70"
) +
geom_ribbon(
aes(ymin = share_lb, ymax = share_ub, fill = status),
color = NA,
alpha = 0.4
) +
geom_path(
) +
scale_x_continuous(
TeX("(Estimated) PM$_{2.5}$ Level $\\left(\\mu g/m^3\\right)$"),
breaks = c(seq(0, 30, 5), 12.5)
) +
scale_y_continuous(
TeX("Share of U.S. Population"),
limits = c(0, 1)
) +
ggtitle(
TeX("Share of US Population Living at or Above PM$_{2.5}$ Levels"),
subtitle = TeX(paste0(
i, ", ",
str_replace_all(source, "et al.", "\\\\textit{et al.}")
))
) +
theme_pander(
base_size = 13,
base_family = "Roboto"
) +
theme(
panel.grid.minor = element_blank(),
legend.position = "bottom"
) +
scale_color_manual(
"County NAAQS Status:",
values = magma(10)[c(7, 1)]
) +
scale_fill_manual(
"County NAAQS Status:",
values = magma(10)[c(7, 1)]
)
# Save it
ggsave(
plot = gg_tmp,
path = dir_figures %>% paste0("Graphs/ExposureCDFs/AttainmentStatus/"),
filename = filename,
height = 7.5,
width = 12,
NULL
)
}
# Figure: CDF of population exposure by attainment, year, dataset ------------------------
# Set year
i <- 2003
# source <- "Di et al."
# source <- "van Donkelaar et al."
for (source in c("Di et al.", "van Donkelaar et al.")) {
# Create filename
if (str_detect(source, "van")) filename <- paste0("cdf_att_vd_", i, ".png")
if (str_detect(source, "Di")) filename <- paste0("cdf_att_di_", i, ".png")
# Plot the CDF for a given year
gg_tmp <- ggplot(
data = cdf_att_wide[year == i & dataset == source],
aes(x = pm_level, y = share, color = status)
) +
geom_hline(
yintercept = 0,
color = "grey70"
) +
geom_vline(
xintercept = 0,
color = "grey70"
) +
geom_ribbon(
aes(ymin = share_lb, ymax = share_ub, fill = status),
color = NA,
alpha = 0.4
) +
geom_path(
) +
scale_x_continuous(
TeX("(Estimated) PM$_{2.5}$ Level $\\left(\\mu g/m^3\\right)$"),
breaks = c(seq(0, 30, 5), 12.5)
) +
scale_y_continuous(
TeX("Share of U.S. Population"),
limits = c(0, 1)
) +
ggtitle(
TeX("Share of US Population Living at or Above PM$_{2.5}$ Levels"),
subtitle = TeX(paste0(
i, ", ",
str_replace_all(source, "et al.", "\\\\textit{et al.}")
))
) +
theme_pander(
base_size = 13,
base_family = "Roboto"
) +
theme(
panel.grid.minor = element_blank(),
legend.position = "bottom"
) +
scale_color_manual(
"County NAAQS Status:",
values = magma(10)[c(7, 1)]
) +
scale_fill_manual(
"County NAAQS Status:",
values = magma(10)[c(7, 1)]
)
# Save it
ggsave(
plot = gg_tmp,
path = dir_figures %>% paste0("Graphs/ExposureCDFs/AttainmentStatus/"),
filename = filename,
height = 7.5,
width = 12,
NULL
)
}
# Figure: CDF of population exposure by attainment, year, dataset ------------------------
# Set year
i <- 2007
# source <- "Di et al."
# source <- "van Donkelaar et al."
for (source in c("Di et al.", "van Donkelaar et al.")) {
# Create filename
if (str_detect(source, "van")) filename <- paste0("cdf_att_vd_", i, ".png")
if (str_detect(source, "Di")) filename <- paste0("cdf_att_di_", i, ".png")
# Plot the CDF for a given year
gg_tmp <- ggplot(
data = cdf_att_wide[year == i & dataset == source],
aes(x = pm_level, y = share, color = status)
) +
geom_hline(
yintercept = 0,
color = "grey70"
) +
geom_vline(
xintercept = 0,
color = "grey70"
) +
geom_ribbon(
aes(ymin = share_lb, ymax = share_ub, fill = status),
color = NA,
alpha = 0.4
) +
geom_path(
) +
scale_x_continuous(
TeX("(Estimated) PM$_{2.5}$ Level $\\left(\\mu g/m^3\\right)$"),
breaks = c(seq(0, 30, 5), 12.5)
) +
scale_y_continuous(
TeX("Share of U.S. Population"),
limits = c(0, 1)
) +
ggtitle(
TeX("Share of US Population Living at or Above PM$_{2.5}$ Levels"),
subtitle = TeX(paste0(
i, ", ",
str_replace_all(source, "et al.", "\\\\textit{et al.}")
))
) +
theme_pander(
base_size = 13,
base_family = "Roboto"
) +
theme(
panel.grid.minor = element_blank(),
legend.position = "bottom"
) +
scale_color_manual(
"County NAAQS Status:",
values = magma(10)[c(7, 1)]
) +
scale_fill_manual(
"County NAAQS Status:",
values = magma(10)[c(7, 1)]
)
# Save it
ggsave(
plot = gg_tmp,
path = dir_figures %>% paste0("Graphs/ExposureCDFs/AttainmentStatus/"),
filename = filename,
height = 7.5,
width = 12,
NULL
)
}
remotes::install_github('yihui/xaringan')
remotes::install_github('yihui/xaringan')
setwd("~/Dropbox/UO/Teaching/EC421W19/LectureNotes/01Review/")
dir()
rmarkdown::render("01_review.Rmd")
install.packages("gapminder")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
install.packages("gapminder")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
cond_bad
cond_good
"test"
"7.8"
"7.8" %>% as.numeric()
install.packages(ggridges)
install.packages("ggridges")
install.packages("Cairo")
library(pacman)
p_load(broom, latex2exp, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr, parallel)
n_p <- 100
n_s <- 30
# Set the seed
set.seed(12468)
# Generate data
pop_df <- tibble(
i = 3,
x = rnorm(n_p, mean = 5, sd = 1.5),
e = rnorm(n_p, mean = 0, sd = 1),
y = i + 0.5 * x + e,
row = rep(1:sqrt(n_p), times = sqrt(n_p)),
col = rep(1:sqrt(n_p), each = sqrt(n_p)),
s1 = sample(x = c(rep(T, n_s), rep(F, n_p - n_s))),
s2 = sample(x = c(rep(T, n_s), rep(F, n_p - n_s))),
s3 = sample(x = c(rep(T, n_s), rep(F, n_p - n_s)))
)
# Regressions
lm0 <- lm(y ~ x, data = pop_df)
lm1 <- lm(y ~ x, data = filter(pop_df, s1 == T))
lm2 <- lm(y ~ x, data = filter(pop_df, s2 == T))
lm3 <- lm(y ~ x, data = filter(pop_df, s3 == T))
sim_df <- future_lapply(X = 1:1e4, FUN = function(x, size = n_s), future.seed = 12468 {
lm(y ~ x, data = pop_df %>% sample_n(size = size)) %>% tidy()
}) %>% do.call(rbind, .) %>% as_tibble()
set.seed(12468)
sim_df <- future_lapply(X = 1:1e4, FUN = function(x, size = n_s){
lm(y ~ x, data = pop_df %>% sample_n(size = size)) %>% tidy()
}) %>% do.call(rbind, .) %>% as_tibble()
install.packages("future.apply")
p_load(broom, latex2exp, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr, parallel, future.apply)
sim_df <- future_lapply(X = 1:1e4, FUN = function(x, size = n_s){
lm(y ~ x, data = pop_df %>% sample_n(size = size)) %>% tidy()
}) %>% do.call(rbind, .) %>% as_tibble()
ggplot(data = pop_df, aes(x = row, y = col)) +
geom_point(color = "darkslategray", size = 10) +
theme_empty
ggplot(data = pop_df, aes(x = row, y = col)) +
geom_point(color = "darkslategray", size = 10)
unpause <- function(file_name, path = ".", pdf_paused = F, pdf_unpaused = F) {
# Load packages
library(pacman)
p_load(stringr, magrittr)
# Read .Rmd file's text
rmd_text <- paste0(path, "/", file_name) %>% readLines()
# Drop rows with '--' (must start with '--' and cannot be followed by '-')
new_text <- rmd_text[!str_detect(rmd_text, "^-{2}(?!-)")]
# Drop rows that reference 'unpause' (don't want infinite loops)
# HACK: Problematic if unpause() call spans multiple lines
# FIXME: Search for closing of parenthesis in unpause() call?
new_text <- new_text[!str_detect(new_text, "unpause\\(")]
# New file name
new_file_name <- str_replace(file_name, "\\.Rmd", "_NoPause.Rmd") %>%
str_replace("\\.rmd", "_NoPause.rmd") %>%
paste0(path, "/", .)
# Find the root of the file names (drop suffix). Helpful for html/pdf naming later.
new_file_root <- new_file_name %>% str_remove("\\.Rmd$") %>% str_remove("\\.rmd$")
old_file_root <- paste0(path, "/", file_name) %>%
str_remove("\\.Rmd$") %>% str_remove("\\.rmd$")
# Save the updated .Rmd script
con <- file(new_file_name)
writeLines(new_text, con)
close(con)
# Render unpaused .Rmd script to HTML slides
# HACK: Executing with 'system' due to conflicts with same-name code chunks
output_format <- "xaringan::moon_reader"
system(paste0(
"Rscript --vanilla -e \'rmarkdown::render(",
paste0("\"", new_file_name, "\""),
", ",
paste0("\"", output_format, "\""),
")\'"
))
# Generate PDFs for paused and unpaused slides (if requested)
# Paused PDF slides
if (pdf_paused) {
xaringan::decktape(
file = paste0(old_file_root, ".html "),
output = paste0(old_file_root, ".pdf")
)
}
# Unpaused PDF slides
if (pdf_unpaused) {
xaringan::decktape(
file = paste0(new_file_root, ".html "),
output = paste0(new_file_root, ".pdf")
)
}
}
options(htmltools.dir.version = FALSE)
library(pacman)
p_load(broom, latex2exp, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr, parallel, future.apply)
# Define pink color
red_pink <- "#e64173"
# Notes directory
dir_slides <- "~/Dropbox/Teaching/EC 421 F19/EC421F19_private/LectureNotes/02Review/"
# Knitr options
opts_chunk$set(
comment = "#>",
fig.align = "center",
fig.height = 7,
fig.width = 10.5,
# dpi = 300,
warning = F,
message = F
)
# A blank theme for ggplot
theme_empty <- theme_bw() + theme(
line = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
plot.margin = structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_simple <- theme_bw() + theme(
line = element_blank(),
panel.grid = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text.x = element_text(size = 14),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
# plot.margin = structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
source("../../ScriptsR/unpause.R")
unpause("02_review.Rmd", ".", T, T)
options(htmltools.dir.version = FALSE)
library(pacman)
p_load(
broom, latex2exp, ggplot2, ggthemes, viridis, extrafont,
dplyr,
magrittr, knitr, parallel
)
# Define pink color
red_pink <- "#e64173"
grey_light <- "grey70"
grey_mid <- "grey50"
grey_dark <- "grey20"
# Dark slate grey: #314f4f
# Notes directory
dir_slides <- "~/Dropbox/Teaching/EC 421 F19/EC421F19_private/LectureNotes/02Review/"
# Knitr options
opts_chunk$set(
comment = "#>",
fig.align = "center",
fig.height = 7,
fig.width = 10.5,
warning = F,
message = F
)
# A blank theme for ggplot
theme_empty <- theme_bw() + theme(
line = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
plot.margin = structure(c(0, 0, -0.5, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_simple <- theme_bw() + theme(
line = element_blank(),
panel.grid = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text.x = element_text(size = 18, family = "STIXGeneral"),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
# plot.margin = structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_axes_math <- theme_void() + theme(
text = element_text(family = "MathJax_Math"),
axis.title = element_text(size = 22),
axis.title.x = element_text(hjust = .95, margin = margin(0.15, 0, 0, 0, unit = "lines")),
axis.title.y = element_text(vjust = .95, margin = margin(0, 0.15, 0, 0, unit = "lines")),
axis.line = element_line(
color = "grey70",
size = 0.25,
arrow = arrow(angle = 30, length = unit(0.15, "inches")
)),
plot.margin = structure(c(1, 0, 1, 0), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_axes_serif <- theme_void() + theme(
text = element_text(family = "MathJax_Main"),
axis.title = element_text(size = 22),
axis.title.x = element_text(hjust = .95, margin = margin(0.15, 0, 0, 0, unit = "lines")),
axis.title.y = element_text(vjust = .95, margin = margin(0, 0.15, 0, 0, unit = "lines")),
axis.line = element_line(
color = "grey70",
size = 0.25,
arrow = arrow(angle = 30, length = unit(0.15, "inches")
)),
plot.margin = structure(c(1, 0, 1, 0), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_axes <- theme_void() + theme(
text = element_text(family = "Fira Sans Book"),
axis.title = element_text(size = 18),
axis.title.x = element_text(hjust = .95, margin = margin(0.15, 0, 0, 0, unit = "lines")),
axis.title.y = element_text(vjust = .95, margin = margin(0, 0.15, 0, 0, unit = "lines")),
axis.line = element_line(
color = grey_light,
size = 0.25,
arrow = arrow(angle = 30, length = unit(0.15, "inches")
)),
plot.margin = structure(c(1, 0, 1, 0), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
source("../../ScriptsR/unpause.R")
unpause("04_heteroskedasticity.Rmd", ".", T, T)
