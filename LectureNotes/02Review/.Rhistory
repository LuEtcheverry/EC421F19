scale_x_continuous(
TeX("(Estimated) PM$_{2.5}$ Level $\\left(\\mu g/m^3\\right)$"),
breaks = c(seq(0, 30, 5), 12.5)
) +
scale_y_continuous(
TeX("Share of U.S. Population"),
limits = c(0, 1)
) +
ggtitle(
TeX("Share of US Population Living at or Above PM$_{2.5}$ Levels"),
subtitle = TeX(paste0(
i, ", ",
str_replace_all(source, "et al.", "\\\\textit{et al.}")
))
) +
theme_pander(
base_size = 13,
base_family = "Roboto"
) +
theme(
panel.grid.minor = element_blank(),
legend.position = "bottom"
) +
scale_color_manual(
TeX("County PM$_{2.5}$ Status:"),
values = magma(10)[c(7, 1)]
) +
scale_fill_manual(
TeX("County PM$_{2.5}$ Status:"),
values = magma(10)[c(7, 1)]
)
# Save it
ggsave(
plot = gg_tmp,
path = dir_figures %>% paste0("Graphs/ExposureCDFs/AttainmentStatus/"),
filename = filename,
height = 7.5,
width = 12,
NULL
)
}
# Figure: CDF of population exposure by attainment, year, dataset ------------------------
# Set year
i <- 2005
# source <- "Di et al."
# source <- "van Donkelaar et al."
for (source in c("Di et al.", "van Donkelaar et al.")) {
# Create filename
if (str_detect(source, "van")) filename <- paste0("cdf_att_vd_", i, ".png")
if (str_detect(source, "Di")) filename <- paste0("cdf_att_di_", i, ".png")
# Plot the CDF for a given year
gg_tmp <- ggplot(
data = cdf_att_wide[year == i & dataset == source],
aes(x = pm_level, y = share, color = status)
) +
geom_hline(
yintercept = 0,
color = "grey70"
) +
geom_vline(
xintercept = 0,
color = "grey70"
) +
geom_ribbon(
aes(ymin = share_lb, ymax = share_ub, fill = status),
color = NA,
alpha = 0.4
) +
geom_path(
) +
scale_x_continuous(
TeX("(Estimated) PM$_{2.5}$ Level $\\left(\\mu g/m^3\\right)$"),
breaks = c(seq(0, 30, 5), 12.5)
) +
scale_y_continuous(
TeX("Share of U.S. Population"),
limits = c(0, 1)
) +
ggtitle(
TeX("Share of US Population Living at or Above PM$_{2.5}$ Levels"),
subtitle = TeX(paste0(
i, ", ",
str_replace_all(source, "et al.", "\\\\textit{et al.}")
))
) +
theme_pander(
base_size = 13,
base_family = "Roboto"
) +
theme(
panel.grid.minor = element_blank(),
legend.position = "bottom"
) +
scale_color_manual(
"County NAAQS Status:",
values = magma(10)[c(7, 1)]
) +
scale_fill_manual(
"County NAAQS Status:",
values = magma(10)[c(7, 1)]
)
# Save it
ggsave(
plot = gg_tmp,
path = dir_figures %>% paste0("Graphs/ExposureCDFs/AttainmentStatus/"),
filename = filename,
height = 7.5,
width = 12,
NULL
)
}
# Figure: CDF of population exposure by attainment, year, dataset ------------------------
# Set year
i <- 2003
# source <- "Di et al."
# source <- "van Donkelaar et al."
for (source in c("Di et al.", "van Donkelaar et al.")) {
# Create filename
if (str_detect(source, "van")) filename <- paste0("cdf_att_vd_", i, ".png")
if (str_detect(source, "Di")) filename <- paste0("cdf_att_di_", i, ".png")
# Plot the CDF for a given year
gg_tmp <- ggplot(
data = cdf_att_wide[year == i & dataset == source],
aes(x = pm_level, y = share, color = status)
) +
geom_hline(
yintercept = 0,
color = "grey70"
) +
geom_vline(
xintercept = 0,
color = "grey70"
) +
geom_ribbon(
aes(ymin = share_lb, ymax = share_ub, fill = status),
color = NA,
alpha = 0.4
) +
geom_path(
) +
scale_x_continuous(
TeX("(Estimated) PM$_{2.5}$ Level $\\left(\\mu g/m^3\\right)$"),
breaks = c(seq(0, 30, 5), 12.5)
) +
scale_y_continuous(
TeX("Share of U.S. Population"),
limits = c(0, 1)
) +
ggtitle(
TeX("Share of US Population Living at or Above PM$_{2.5}$ Levels"),
subtitle = TeX(paste0(
i, ", ",
str_replace_all(source, "et al.", "\\\\textit{et al.}")
))
) +
theme_pander(
base_size = 13,
base_family = "Roboto"
) +
theme(
panel.grid.minor = element_blank(),
legend.position = "bottom"
) +
scale_color_manual(
"County NAAQS Status:",
values = magma(10)[c(7, 1)]
) +
scale_fill_manual(
"County NAAQS Status:",
values = magma(10)[c(7, 1)]
)
# Save it
ggsave(
plot = gg_tmp,
path = dir_figures %>% paste0("Graphs/ExposureCDFs/AttainmentStatus/"),
filename = filename,
height = 7.5,
width = 12,
NULL
)
}
# Figure: CDF of population exposure by attainment, year, dataset ------------------------
# Set year
i <- 2007
# source <- "Di et al."
# source <- "van Donkelaar et al."
for (source in c("Di et al.", "van Donkelaar et al.")) {
# Create filename
if (str_detect(source, "van")) filename <- paste0("cdf_att_vd_", i, ".png")
if (str_detect(source, "Di")) filename <- paste0("cdf_att_di_", i, ".png")
# Plot the CDF for a given year
gg_tmp <- ggplot(
data = cdf_att_wide[year == i & dataset == source],
aes(x = pm_level, y = share, color = status)
) +
geom_hline(
yintercept = 0,
color = "grey70"
) +
geom_vline(
xintercept = 0,
color = "grey70"
) +
geom_ribbon(
aes(ymin = share_lb, ymax = share_ub, fill = status),
color = NA,
alpha = 0.4
) +
geom_path(
) +
scale_x_continuous(
TeX("(Estimated) PM$_{2.5}$ Level $\\left(\\mu g/m^3\\right)$"),
breaks = c(seq(0, 30, 5), 12.5)
) +
scale_y_continuous(
TeX("Share of U.S. Population"),
limits = c(0, 1)
) +
ggtitle(
TeX("Share of US Population Living at or Above PM$_{2.5}$ Levels"),
subtitle = TeX(paste0(
i, ", ",
str_replace_all(source, "et al.", "\\\\textit{et al.}")
))
) +
theme_pander(
base_size = 13,
base_family = "Roboto"
) +
theme(
panel.grid.minor = element_blank(),
legend.position = "bottom"
) +
scale_color_manual(
"County NAAQS Status:",
values = magma(10)[c(7, 1)]
) +
scale_fill_manual(
"County NAAQS Status:",
values = magma(10)[c(7, 1)]
)
# Save it
ggsave(
plot = gg_tmp,
path = dir_figures %>% paste0("Graphs/ExposureCDFs/AttainmentStatus/"),
filename = filename,
height = 7.5,
width = 12,
NULL
)
}
remotes::install_github('yihui/xaringan')
remotes::install_github('yihui/xaringan')
setwd("~/Dropbox/UO/Teaching/EC421W19/LectureNotes/01Review/")
dir()
rmarkdown::render("01_review.Rmd")
install.packages("gapminder")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
install.packages("gapminder")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
rmarkdown::render("01_review.Rmd")
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
cond_bad
cond_good
"test"
"7.8"
"7.8" %>% as.numeric()
install.packages(ggridges)
install.packages("ggridges")
install.packages("Cairo")
install.packages("pacman")
install.packages(c("dbplyr", "ggmap", "ggplot2", "ggthemes", "leaflet", "lfe", "purrr", "xaringan"))
install.packages("pacman")
install.packages("pacman")
install.packages("xaringan")
options(htmltools.dir.version = FALSE)
library(pacman)
p_load(broom, latex2exp, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr, parallel, future.apply)
# Define pink color
red_pink <- "#e64173"
# Notes directory
dir_slides <- "~/Dropbox/Teaching/EC 421 F19/EC421F19_private/LectureNotes/02Review/"
# Knitr options
opts_chunk$set(
comment = "#>",
fig.align = "center",
fig.height = 7,
fig.width = 10.5,
# dpi = 300,
warning = F,
message = F
)
# A blank theme for ggplot
theme_empty <- theme_bw() + theme(
line = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
plot.margin = structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_simple <- theme_bw() + theme(
line = element_blank(),
panel.grid = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text.x = element_text(size = 14),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
# plot.margin = structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
cond_good
# Setup ----------------------------------------------------------------------------------
# Options
options(stringsAsFactors = F)
# Packages
library(pacman)
p_load(ggridges)
# Data work ------------------------------------------------------------------------------
# Set seed
set.seed(12345)
# Sample size
n <- 1e5
# Exogenous
e_good <- tibble(
x = runif(n = n, min = -4, max = 4),
e = rnorm(n)
) %>% mutate(x = round(x))
# Endogenous
e_bad <- tibble(
x = runif(n = n, min = -4, max = 4),
e = rnorm(n) + 0.5 * x
) %>% mutate(x = round(x))
# Figures: Joint densities ---------------------------------------------------------------
# The joint plot: good
joint_good <- ggplot(data = e_good, aes(x = e)) +
geom_density() +
theme_pander()
# The joint plot: bad
joint_bad <- ggplot(data = e_bad, aes(x = e)) +
geom_density() +
theme_pander()
# Figures: Conditional densities ---------------------------------------------------------
cond_good <- ggplot(data = e_good, aes(x = e, y = as.factor(x))) +
geom_density_ridges_gradient(
aes(fill = ..x..),
color = "white",
scale = 2.5,
size = 0.2
) +
# geom_vline(xintercept = 0, alpha = 0.3) +
scale_fill_viridis(option = "magma") +
xlab("u") +
ylab("X") +
theme_pander(base_family = "Fira Sans Book", base_size = 18) +
theme(
legend.position = "none",
axis.title.y = element_text(angle = 0, vjust = 0.5, family = "MathJax_Math", size = 22),
axis.title.x = element_text(family = "MathJax_Math", size = 22)
)
cond_bad <- ggplot(data = e_bad, aes(x = e, y = as.factor(x))) +
geom_density_ridges_gradient(
aes(fill = ..x..),
color = "white",
scale = 2.5,
size = 0.2
) +
# geom_vline(xintercept = 0, alpha = 0.3) +
scale_fill_viridis(option = "magma") +
xlab("u") +
ylab("X") +
theme_pander(base_family = "Fira Sans Book", base_size = 18) +
theme(
legend.position = "none",
axis.title.y = element_text(angle = 0, vjust = 0.5, family = "MathJax_Math", size = 22),
axis.title.x = element_text(family = "MathJax_Math", size = 22)
)
system("decktape remark 02_review.html 02_review.pdf --chrome-arg=--allow-file-access-from-files")
options(htmltools.dir.version = FALSE)
library(pacman)
p_load(broom, latex2exp, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr, parallel, future.apply)
# Define pink color
red_pink <- "#e64173"
# Notes directory
dir_slides <- "~"
# Knitr options
opts_chunk$set(
comment = "#>",
fig.align = "center",
fig.height = 7,
fig.width = 10.5,
# dpi = 300,
warning = F,
message = F
)
# A blank theme for ggplot
theme_empty <- theme_bw() + theme(
line = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
plot.margin = structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_simple <- theme_bw() + theme(
line = element_blank(),
panel.grid = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text.x = element_text(size = 14),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
# plot.margin = structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
system("decktape remark 02_review.html 02_review.pdf --chrome-arg=--allow-file-access-from-files")
options(htmltools.dir.version = FALSE)
library(pacman)
p_load(broom, latex2exp, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr, parallel, future.apply)
# Define pink color
red_pink <- "#e64173"
# Notes directory
dir_slides <- "~"
# Knitr options
opts_chunk$set(
comment = "#>",
fig.align = "center",
fig.height = 7,
fig.width = 10.5,
# dpi = 300,
warning = F,
message = F
)
# A blank theme for ggplot
theme_empty <- theme_bw() + theme(
line = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
plot.margin = structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
theme_simple <- theme_bw() + theme(
line = element_blank(),
panel.grid = element_blank(),
rect = element_blank(),
strip.text = element_blank(),
axis.text.x = element_text(size = 14),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
plot.title = element_blank(),
axis.title = element_blank(),
# plot.margin = structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit"),
legend.position = "none"
)
#system("decktape remark 02_review.html 02_review.pdf --chrome-arg=--allow-file-access-from-files")
library(xaringan)
decktape("02_review.html", "02_review.pdf", args = "--chrome-arg=--allow-file-access-from-files")
#system("decktape remark 02_review.html 02_review.pdf --chrome-arg=--allow-file-access-from-files")
library(xaringan)
decktape("02_review.html", "02_review.pdf", args = "--chrome-arg=--allow-file-access-from-files")
decktape remark 02_review.html 02_review.pdf --chrome-arg=--allow-file-access-from-files
decktape 02_review.html 02_review.pdf --chrome-arg=--allow-file-access-from-files
#system("decktape remark 02_review.html 02_review.pdf --chrome-arg=--allow-file-access-from-files")
library(xaringan)
decktape("02_review.html", "02_review.pdf", args = "--chrome-arg=--allow-file-access-from-files")
system("decktape remark 02_review.html 02_review.pdf --chrome-arg=--allow-file-access-from-files")
#library(xaringan)
#decktape("02_review.html", "02_review.pdf", args = "--chrome-arg=--allow-file-access-from-files")
